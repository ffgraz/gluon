#!/usr/bin/lua

local uci = require('simple-uci').cursor()
local site = require 'gluon.site'
local util = require 'gluon.util'
local wireless = require 'gluon.wireless'

local util = require 'gluon.util'

local mesh_interfaces = util.get_role_interfaces(uci, 'mesh')
local uplink_interfaces = util.get_role_interfaces(uci, 'uplink')

local mesh_interfaces_uplink = {}
local mesh_interfaces_other = {}
for _, iface in ipairs(mesh_interfaces) do
	if util.contains(uplink_interfaces, iface) then
		table.insert(mesh_interfaces_uplink, iface)
	else
		table.insert(mesh_interfaces_other, iface)
	end
end

-- NOTE: stuff in here is idempotent as those are list entries with an id associated
-- TODO: add *all* the rules we need, plus additional zones if necesarrry
-- FIXME: firewall rules are currently broken, there's only mesh / wired_mesh zone, need to ensure they are properly assigned

-- NOTE: this is a gigantic hack that overrides the gluon rules because they rely on gluon_proto
-- this will need a rework once olsr and gluon_proto go together
-- (i suspect it will pretty much just take an "ip addr add <v4> <intf>" and the same for v6 for the statics to work)
-- (we could prob also do multiple v6 then on loopback?)
local fw = {
	wired_mesh = {},
	mesh = {},
}

local intf = {
	wired_mesh = {},
	vpn_mesh = {},
	radio_mesh = {},
}

-- get all mesh radios and mesh lans and then add them to olsrd
wireless.foreach_radio(uci, function(radio, index, config)
	local radio_name = radio['.name']
	table.insert(intf.radio_mesh, 'mesh_' .. radio_name)
	if uci:get('network', 'ibss_' .. radio_name, 'proto') then
		table.insert(intf.radio_mesh, 'ibss_' .. radio_name)
	end
end)

local vpn_mesh = false

if pcall(function() require 'gluon.mesh-vpn' end) then
	local vpn_core = require 'gluon.mesh-vpn'

	if vpn_core.enabled() then
		-- mesh_vpn is a interface that has the right ifname
		-- we can't use mesh-vpn (dash instead of underscore) since it's not a uci interface
		table.insert(intf.vpn_mesh, 'mesh_vpn')
		vpn_mesh = true
	end
end

local function has_role_mesh(ifname)
	local roles = uci:get('gluon', 'iface_' .. ifname, 'role')

	local has_role = false

	if roles then
		for _, r in ipairs(roles) do
			if r == 'mesh' then
				has_role = true
			end
		end
	end

	return has_role
end

if #mesh_interfaces_uplink then
	for _, i in ipairs(mesh_interfaces_uplink) do
		table.insert(intf.wired_mesh, i)
	end

	-- OLSR uses macvlan here to keep things nice and clean
	if not site.mesh.vxlan() then
		uci:section('network', 'interface', 'mesh_uplink', {
			type = 'macvlan',
			vxlan = null,
		})
	end
end

if #mesh_interfaces_other then
	for _, i in ipairs(mesh_interfaces_other) do
		table.insert(intf.wired_mesh, i)
	end
end

local function set_zone(list, zone)
	for _, net in ipairs(fw.wired_mesh) do
		uci:set('network', net, 'zone', 'mesh')
	end
end

set_zone(intf.wired_mesh, 'mesh')
set_zone(intf.vpn_mesh, 'mesh')
set_zone(intf.radio_mesh, 'mesh')

intf.all_intfs = {}

for _, l in ipairs({ intf.wired_mesh, intf.vpn_mesh, intf.radio_mesh }) do
	for _, n in ipairs(l) do
		table.insert(intf.all_intfs, n)
	end
end

uci:set_list('firewall', 'mesh', 'network', intf.all_intfs)

-- TODO: teardown when not enabled

uci:delete_all('olsrd', 'Interface')

if site.mesh.olsrd.v1.enable then
	-- set config
	local olsrConfig = {
		IpVersion = '4',
		FIBMetric = 'flat',
		LinkQualityLevel = '2',
		OlsrPort = '698',
		Willingness = '3'
	}

	local extraConf = site.mesh.olsrd.v1.config()
	if extraConf then
		for k, v in pairs(extraConf) do
			olsrConfig[k] = extraConf[k]
		end
	end

	uci:delete_all('olsrd', 'olsrd')
	uci:section('olsrd', 'olsrd', nil, olsrConfig)

	-- add jsoninfo
	uci:section('olsrd', 'LoadPlugin', 'jsoninfo', {
		library = 'olsrd_jsoninfo.so.1.1',
		ignore = 0,
	})

	if #intf.wired_mesh then
		uci:section('olsrd', 'Interface', 'wired_mesh', {
			interface = intf.wired_mesh,
			Mode = 'ether',
		})
	end

	if #intf.vpn_mesh then
		uci:section('olsrd', 'Interface', 'vpn_mesh', {
			interface = intf.vpn_mesh,
			Mode = 'mesh',
		})
	end

	if #intf.radio_mesh then
		uci:section('olsrd', 'Interface', 'radio_mesh', {
			interface = intf.radio_mesh,
			Mode = 'mesh',
		})
	end

	uci:section('firewall', 'rule', 'allow_olsr_mesh', {
		-- src = 'mesh',
		-- HACK: this is a temporary hack because firewall doesn't want to work
		src = '*',
		dest_port = '698',
		proto = 'udp',
		target = 'ACCEPT',
	})

	uci:section('firewall', 'rule', 'allow_olsr_wired_mesh', {
		src = 'wired_mesh',
		dest_port = '698',
		proto = 'udp',
		target = 'ACCEPT',
	})
end

uci:delete_all('olsrd2', 'interface')

if site.mesh.olsrd.v2.enable then
	local addrs = { }
	local lan = { }
	local config = uci:get_first("olsrd2", "olsrv2")

	-- set global config
	local olsr2Config = {
		failfast = 'no',
		pidfile = '/var/run/olsrd2.pid',
		lockfile = '/var/lock/olsrd2'
	}

	local extraConf = site.mesh.olsrd.v2.config()
	if extraConf then
		for k, v in pairs(extraConf) do
			olsr2Config[k] = extraConf[k]
		end
	end

	uci:delete_all('olsrd2', 'global')
	uci:section('olsrd2', 'global', nil, olsr2Config)

	if site.mesh.olsrd.v2.lan() then
		lan = site.mesh.olsrd.v2.lan()
	end

	if site.mesh.olsrd.v2.ip6_exclusive_mode() then
		table.insert(addrs, '-0.0.0.0/0')
	else
		table.insert(addrs, '-127.0.0.1/8')
	end
	if site.mesh.olsrd.v2.ip4_exclusive_mode() then
		table.insert(addrs, '-::/0')
	else
		table.insert(addrs, '-::1/128')
	end

	if site.prefix4() and not site.mesh.olsrd.v2.ip6_exclusive_mode() then
		table.insert(lan, site.prefix4())
	end
	if site.prefix6() and not site.mesh.olsrd.v2.ip4_exclusive_mode() then
		table.insert(lan, site.prefix6())
	end

	table.insert(addrs, 'default_accept')

	uci:set("olsrd2", config, "originator", addrs)
	uci:set("olsrd2", config, "lan", lan)

	if #intf.wired_mesh then
		uci:section('olsrd2', 'interface', 'wired_mesh', {
			ifname = intf.wired_mesh,
			bindto = addrs,
		})
	end

	if #intf.vpn_mesh then
		uci:section('olsrd2', 'interface', 'vpn_mesh', {
			ifname = intf.vpn_mesh,
			bindto = addrs,
		})
	end

	if #intf.radio_mesh then
		uci:section('olsrd2', 'interface', 'radio_mesh', {
			ifname = intf.radio_mesh,
			bindto = addrs,
		})
	end

	uci:section('olsrd2', 'interface', 'loopback', {
		ifname = { 'loopback' },
		bindto = addrs,
	})

	uci:section('firewall', 'rule', 'allow_olsr2_mesh', {
		-- src = 'mesh',
		-- HACK: this is a temporary hack because firewall doesn't want to work
		src = '*',
		dest_port = '269',
		proto = 'udp',
		target = 'ACCEPT',
	})

	uci:section('firewall', 'rule', 'allow_olsr2_wired_mesh', {
		src = 'wired_mesh',
		dest_port = '269',
		proto = 'udp',
		target = 'ACCEPT',
	})
end

uci:save('olsrd')
uci:save('olsrd2')
uci:save('firewall')
uci:save('network')
