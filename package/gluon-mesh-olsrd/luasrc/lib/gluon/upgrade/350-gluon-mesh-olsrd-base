#!/usr/bin/lua

local uci = require('simple-uci').cursor()
local site = require 'gluon.site'
local util = require 'gluon.util'
local wireless = require 'gluon.wireless'

-- NOTE: stuff in here is idempotent as those are list entries with an id associated
-- TODO: add *all* the rules we need, plus additional zones if necesarrry
-- FIXME: firewall rules are currently broken, there's only mesh / wired_mesh zone, need to ensure they are properly assigned

-- NOTE: this is a gigantic hack that overrides the gluon rules because they rely on gluon_proto
-- this will need a rework once olsr and gluon_proto go together
local fw = {
	wired_mesh = {},
	mesh = {},
}

-- get all mesh radios and mesh lans and then add them to olsrd
wireless.foreach_radio(uci, function(radio, index, config)
	local radio_name = radio['.name']
	table.insert(fw.mesh, 'mesh_' .. radio_name)
	if uci:get('network', 'ibss_' .. radio_name, 'proto') then
		table.insert(fw.mesh, 'ibss_' .. radio_name)
	end
end)

if pcall(function() require 'gluon.mesh-vpn' end) then
	local vpn_core = require 'gluon.mesh-vpn'

	if vpn_core.enabled() then
		-- mesh_vpn is a interface that has the right ifname
		-- we can't use mesh-vpn (dash instead of underscore) since it's not a uci interface
		table.insert(fw.wired_mesh, 'mesh_vpn')
	end
end

local wan_mesh = not uci:get_bool('network', 'mesh_wan', 'disabled')

if wan_mesh then
	table.insert(fw.wired_mesh, 'mesh_wan')
end

local lan_mesh = uci:get('network', 'mesh_lan', 'proto') and not uci:get_bool('network', 'mesh_lan', 'disabled')

if lan_mesh then
	table.insert(fw.wired_mesh, 'mesh_lan')
end

-- put all the mesh things in mesh firewall table
for key, value in ipairs(fw.wired_mesh) do
	table.insert(fw.mesh, value)
end

uci:set_list('firewall', 'mesh', 'network', fw.mesh)
uci:set_list('firewall', 'wired_mesh', 'network', fw.wired_mesh)

networks = uci:get_list('firewall', 'drop', 'network')
util.remove_from_set(fw.mesh, 'client')
uci:set_list('firewall', 'drop', 'network', networks)

-- TODO: teardown when not enabled

uci:delete_all('olsrd', 'Interface')

if site.mesh.olsrd.v1.enable then
	-- set config
	local olsrConfig = {
		IpVersion = '4',
		FIBMetric = 'flat',
		LinkQualityLevel = '2',
		OlsrPort = '698',
		Willingness = '3'
	}

	local extraConf = site.mesh.olsrd.v1.config()
	if extraConf then
		for k, v in pairs(extraConf) do
			olsrConfig[k] = extraConf[k]
		end
	end

	uci:delete_all('olsrd', 'olsrd')
	uci:section('olsrd', 'olsrd', nil, olsrConfig)

	-- add jsoninfo
	uci:section('olsrd', 'LoadPlugin', 'jsoninfo', {
		library = 'olsrd_jsoninfo.so.1.1',
		ignore = 0,
	})

	uci:section('olsrd', 'Interface', 'mesh', {
		interface = fw.mesh,
		Mode = 'mesh',
	})

	uci:section('firewall', 'rule', 'allow_olsr_mesh', {
		-- src = 'mesh',
		-- HACK: this is a temporary hack because firewall doesn't want to work
		src = '*',
		dest_port = '698',
		proto = 'udp',
		target = 'ACCEPT',
	})

	uci:section('firewall', 'rule', 'allow_olsr_wired_mesh', {
		src = 'wired_mesh',
		dest_port = '698',
		proto = 'udp',
		target = 'ACCEPT',
	})
end

uci:delete_all('olsrd2', 'interface')

if site.mesh.olsrd.v2.enable then
	local addrs = { }
	local lan = { }
	local config = uci:get_first("olsrd2", "olsrv2")

	-- set global config
	local olsr2Config = {
		failfast = 'no',
		pidfile = '/var/run/olsrd2.pid',
		lockfile = '/var/lock/olsrd2'
	}

	local extraConf = site.mesh.olsrd.v2.config()
	if extraConf then
		for k, v in pairs(extraConf) do
			olsr2Config[k] = extraConf[k]
		end
	end

	uci:delete_all('olsrd2', 'global')
	uci:section('olsrd2', 'global', nil, olsr2Config)

	if site.mesh.olsrd.v2.lan() then
		lan = site.mesh.olsrd.v2.lan()
	end

	if site.mesh.olsrd.v2.ip6_exclusive_mode() then
		table.insert(addrs, '-0.0.0.0/0')
	else
		table.insert(addrs, '-127.0.0.1/8')
	end
	if site.mesh.olsrd.v2.ip4_exclusive_mode() then
		table.insert(addrs, '-::/0')
	else
		table.insert(addrs, '-::1/128')
	end

	if site.prefix4() and not site.mesh.olsrd.v2.ip6_exclusive_mode() then
		table.insert(lan, site.prefix4())
	end
	if site.prefix6() and not site.mesh.olsrd.v2.ip4_exclusive_mode() then
		table.insert(lan, site.prefix6())
	end

	table.insert(addrs, 'default_accept')

	uci:set("olsrd2", config, "originator", addrs)
	uci:set("olsrd2", config, "lan", lan)

	-- we're screwing fw up here but fw has already been set
	table.insert(fw.mesh, 'loopback')
	uci:section('olsrd2', 'interface', 'mesh', {
		ifname = fw.mesh,
		bindto = addrs,
	})

	uci:section('firewall', 'rule', 'allow_olsr2_mesh', {
		-- src = 'mesh',
		-- HACK: this is a temporary hack because firewall doesn't want to work
		src = '*',
		dest_port = '269',
		proto = 'udp',
		target = 'ACCEPT',
	})

	uci:section('firewall', 'rule', 'allow_olsr2_wired_mesh', {
		src = 'wired_mesh',
		dest_port = '269',
		proto = 'udp',
		target = 'ACCEPT',
	})
end


uci:save('olsrd')
uci:save('olsrd2')
uci:save('firewall')
uci:save('network')
